
-------------                 ALOCANDO MEMÓRIA DINAMICAMENTE               -------------
 int main(void)
{
  float *v; //definindo o ponteiro v
  int i, num_componentes;
  
  printf("Informe o numero de componentes do vetor\n");
  scanf("%d", &num_componentes);
  
  /* ------------- Alocando dinamicamente o espaço necessário-------------
  
  1 - Calcular o número de bytes necessários
  primeiramente multiplicamos o número de componentes do vetor pela
  quantidade de bytes que é dada pelo comando sizeof,
  portanto temos:
  num_componentes * sizeof(float)
  
  2 - Reservar a quantidade de memória
  usamos malloc para reservar essa quantidade de memória,
  então temos:
  malloc(num_componentes * sizeof(float))
  
  3 - Converter o ponteiro para o tipo de dados desejado
  como a função malloc retorna um ponteiro do tipo void,
  precisamos converter esse ponteiro para o tipo da nossa variável, no caso float,
  por isso usamos o comando de conversão explicita:
  (float *)
  
  4 - juntando tudo e atribuindo em v temos o comando abaixo: */
  
  v = (float *) malloc(num_componentes * sizeof(float));
  
  //Armazenando os dados em um vetor
  for (i = 0; i < num_componentes; i++)
  {
    printf("\nDigite o valor para a posicao %d do vetor: ", i+1);
    scanf("%f",&v[i]);
  }
  
  // ------ Percorrendo o vetor e imprimindo os valores ----------
  printf("\n*********** Valores do vetor dinamico ************\n\n");
  
  for (i = 0;i < num_componentes; i++)
  {
    printf("%.2f\n",v[i]);
  }
  
  //liberando o espaço de memória alocado
  free(v);
  
  getch();
  return 0;
}


-------------                        STRUCTS                               -------------
 
Structs, também conhecidas como Registros, definem tipos de dados que agrupam 
variáveis sob um mesmo tipo de dado.

A ideia de usar uma struct é permitir que, ao armazenar os dados de uma mesma entidade, 
isto possa ser feito com uma única variável.

Por exemplo, se for preciso armazenar a altura, o peso e a idade de uma pessoa, 
pode - se criar uma struct chamada Pessoa e agrupar os dados em um único tipo de dado.

Aos dados agruados em uma struct dá - se o nome de campos(fields).

-----------                      HEADER FILE                           --------------------

 
A header file is a file with extension .h which contains C function declarations and macro 
definitions to be shared between several source files. There are two types of header files: 
the files that the programmer writes and the files that comes with your compiler.

You request to use a header file in your program by including it with the C preprocessing 
directive #include, like you have seen inclusion of stdio.h header file, which comes along 
with your compiler.

Including a header file is equal to copying the content of the header file but we do not do
 it because it will be error-prone and it is not a good idea to copy the content of a header 
file in the source files, especially if we have multiple source files in a program.

A simple practice in C or C++ programs is that we keep all the constants, macros, system
 wide global variables, and function prototypes in the header files and include that header 
file wherever it is required.


-----------                   LIVRO CÓDIGO LIMPO                         ----------------

Para esse projeto, eu tentei utilizar 3 conceitos implementados pelo autor do livro:

1- O uso do código limpo do capítulo 1: 

	Segundo Grandy Booch, autor do livro Object Oriented Analysis: 

		"Um código limpo é simple e direto. Ele é tão bem legivel 
		quanto uma prosa bem escrita. Ele jamais torna confuso o 
		objetivo do desenvolvedor, em vez disso, ele está repleto de
		abstrações claras e linhas de controle objetivas.

2- Uso de Nomes Significativos do capítulo 2:  
	
	"O nome de uma variável, função ou classe deve responder a todas as grandes questões.
	Ela deve lhe dizer porque existe, o que faz e como é usado. Se um nome requer um 
	comentário, então não revela seu propósito. 

3 - capítulo 3:
	
	Funções pequenas com no máximo 20 linhas, bem endentadas e com um propósito único. 
	(A função deve fazer apenas uma coisa).
	 

----------------                 O CÓDIGO                             ----------------------


// VALORES CONSTANTES PARA O PROCESSO DE VALIDAÇÃO:
#define NUM_SESSOES 2 // Valores de constantes -> no caso a quantidade de sessões permitidas
#define NUM_PESSOAS 2 // Valores de constante -> no caso a quantidade mínima de pessoas permitida
#define TAM_FILME 1
#define TAM_NOME 40 

//STRUCTS
struct sexo
{
	char** sexo; // Define um array com {{valores_sessao1}, {valores_sessao2}}  (neste caso um ponteiro de ponteiro) para o sexo
	int* masculino;
	int* feminino;
};
typedef struct sexo SEXO;

struct pessoas
{
	int* pessoas;
	int** idades; // Define um array com {{valores_sessao1}, {valores_sessao2}}  (neste caso um ponteiro de ponteiro) para a idade
	SEXO s;
};
typedef struct pessoas PESSOAS;

struct filme
{
	char* nome; // Define um array que vai guardar o nome do filme (um ponteiro)
	int sessoes;
	PESSOAS p;
};
typedef struct filme FILME;

struct classificacao
{
	int criancas;
	int adolecentes;
	int adultos;
	int idosos;
} CLASSIFICACAO_default = { 0 }; // Define as variáveis criadas com o valor zero 
typedef struct classificacao CLASSIFICACAO;


// VALIDANDO OS DADOS:
// VALIDA DADOS DE ENTRADA PARA VALORES INTEIRO
void validavalor(int* status, int* valor, int j, int k, int v)
{
	int temp, input;

	if (j == 2 && (*valor < 3 || *valor > 100)) *status = 0;

	while (*status != 1 || *valor < 0)
	{
		while ((temp = getchar()) != EOF && temp != '\n');
		printf("Input inválido....\n");

		switch (j)
		{
		case 0:
			printf("Digite a quantidade de seções que serão realizadas: ");
			break;

		case 1:
			printf("Digite a quantidade de pessoas que assistiram a seção: ");
			break;

		case 2:

			printf("Digite a idade da pessoa %d: ", v + 1);
			break;

		case 3:

			break;
		}
		*status = scanf("%d", valor);
		if (j == 2 && (*valor < 3 || *valor > 100)) *status = 0;
	}
}

// PEGANDO OS DADOS: 
// VALIDA OS DADOS PARA O SEXO
void validasexo(char* sexo, int j)
{
	int sexovalido = *sexo == 'M' || *sexo == 'F';
	while (!sexovalido)
	{
		printf("Input inválido... \nDigite o sexo da pessoa %d: ", j + 1);
		scanf(" %c", sexo);
		*sexo = toupper(*sexo);
		sexovalido = *sexo == 'M' || *sexo == 'F';
	}
}

// VALIDA OS DADOS PARA O NOME DO FILME
void validafilme(char* nome_filme, int* len, int tam_fime, int tam_nome)
{
	while (*len == tam_fime) //	analiza de o tamanho do array é igual a 1
	{
		printf("Digite o nome do filme: ");
		fgets(nome_filme, tam_nome, stdin);
		fflush(stdin);
		*len = strlen(nome_filme);
		printf("Nome do filme: %s\n", nome_filme);
	}
}

// PEGANDO A QUANTIDADE DE SESSOES:
void pegasessoes(FILME* f)
{
	printf("Digite a quantidade de seções que serão realizadas: ");
	int status = scanf("%d", &f->sessoes);
	fflush(stdin);
	validavalor(&status, &f->sessoes, 0, 0, 0);
	if (f->sessoes != NUM_SESSOES) // 2
	{
		printf("Somente é aceito 2 seções como input:\n");
		pegasessoes(f);
	}
	alocamemoria(f);
}
// PEGA A QUANTIDADE DE PESSOAS EM CADA SESSAO 
void pegapessoas(FILME* f)
{
	for (int i = 0; i < f->sessoes; i++)
	{
		printf("Digite a quantidade de pessoas que assistiram a seção %d: ", i + 1);
		int status = scanf("%d", &f->p.pessoas[i]);
		fflush(stdin);
		validavalor(&status, &f->p.pessoas[i], 1, 0, 0);

		if (f->p.pessoas[i] < NUM_PESSOAS) // 10
		{
			printf("É aceito no mínimo 10 por sessão:\n");
			pegapessoas(f);
		}
	}
	alocamemoria_(f);
}

// PEGA O VALOR DA IDADE DE TODOS POR SESSAO
void pegaidades(FILME* f, int k, int v)
{
	for (int i = k; i < f->sessoes; i++)
	{
		printf("SESSÃO %d:\n", i + 1);
		for (int j = v; j < f->p.pessoas[i]; j++)
		{
			printf("Digite a idade da pessoa %d: ", j + 1);
			int status = scanf("%d", &f->p.idades[i][j]);
			validavalor(&status, &f->p.idades[i][j], 2, i, j);
			printf("idades[%d][%d] = %d\n", i, j, f->p.idades[i][j]);
			fflush(stdin);
			pegasexo(f, i, j); // Pega o sexo das pessoas
		}
	}
}

// PEGA O VALOR DO SEXO DE TODOS POR SESSAO
void pegasexo(FILME* f, int i, int j)
{
	printf("Digite o sexo da pessoa %d: ", j + 1);
	scanf("%c", &f->p.s.sexo[i][j]);
	f->p.s.sexo[i][j] = toupper(f->p.s.sexo[i][j]);
	validasexo(&f->p.s.sexo[i][j], j);
	printf("sexo[%d][%d] = %c\n", i, j, f->p.s.sexo[i][j]);
}

// PEGA O NOME DO FILME
void pegafilmes(FILME* f)
{
	f->nome = malloc(sizeof(char) * TAM_NOME);
	printf("Digite o nome do filme: ");
	fgets(f->nome, TAM_NOME, stdin);
	fflush(stdin);
	int len = strlen(f->nome);
	printf("Nome do filme: %s\n", f->nome);
	validafilme(f->nome, &len, TAM_FILME, TAM_NOME);
	pegasessoes(f);
}
// FIM DE PEGANDO OS DADOS

// ALOCANDO MEMÓRIA:
void alocamemoria(FILME* f)
{
	f->p.idades = malloc(sizeof(int*) * f->sessoes);
	f->p.s.sexo = malloc(sizeof(int*) * f->sessoes);
	f->p.pessoas = malloc(sizeof(int) * f->sessoes);
	f->p.s.masculino = malloc(sizeof(int) * f->sessoes);
	f->p.s.feminino = malloc(sizeof(int) * f->sessoes);

	pegapessoas(f);
}

void alocamemoria_(FILME* f)
{
	for (int i = 0; i < f->sessoes; i++) // aloca um vetor com todos os elementos da matriz
	{
		f->p.idades[i] = malloc(sizeof(int) * f->p.pessoas[i]);
		f->p.s.sexo[i] = malloc(sizeof(int*) * f->p.pessoas[i]);
	}
	pegaidades(f, 0, 0);
}
// FIM ALOCANDO MEMÓRIA

// LIBERANDO MEMÓRIA:
void liberamemoria(FILME* f)
{
	for (int i; i < f->sessoes; i++)
	{
		free(f->p.idades[i]);
		free(f->p.s.sexo[i]);
	}
	free(f->p.idades);
	free(f->p.s.sexo);
	free(f->nome);
	free(f->p.pessoas);
}


// VALORES CONSTANTES PARA O PROCESSO DE VALIDAÇÃO:

FILME f;

// IMPRIME OS DADOS DO ALUNO:
void dadosaluno()
{
	printf("NOME: Antonio João da Silva Pereira\n"
			"MATRÍCULA: \n"
			"CURSO: Ciências da Computação\n\n");
	Espera();
}

// CONTA A QUANTIDADE DE PESSOAS DO SEXO MASCULINO E FEMININO PARA O MESMO FILME
void contasexo(int valor, int questao)
{
	for (int i = valor; i <= valor; i++)
	{
		f.p.s.masculino[i] = 0;
		f.p.s.feminino[i] = 0;
	}
	switch (questao)
	{
	case 1:
		for (int i = 0; i <= valor; i++)
		{
			for (int j = 0; j < f.p.pessoas[i]; j++)
			{
				if (f.p.s.sexo[i][j] == 'M') f.p.s.masculino[i] += 1;
				else if (f.p.s.sexo[i][j] == 'F') f.p.s.feminino[i] += 1;
			}
		}
	case 2:
		for (int i = 0; i <= valor; i++)
		{
			for (int j = 0; j < f.p.pessoas[i]; j++)
			{
				if (f.p.idades[i][j] >= 18 && f.p.s.sexo[i][j] == 'M') f.p.s.masculino[i] += 1;
				else if (f.p.idades[i][j] >= 18 && f.p.s.sexo[i][j] == 'F')  f.p.s.feminino[i] += 1;
			}
		}
		break;
	default:
		break;
	}
}

// CONTA A QUANTIDADE DE PESSOAS DE ACORDO A SUA CLASSIFICACAO: 
void contaidades(CLASSIFICACAO* c,int sessoes)
{
	for (int i = 0; i < sessoes; i++)
	{
		for (int j = 0; j < f.p.pessoas[i]; j++)
		{
			if (f.p.idades[i][j] >= 65) c->idosos += 1;
			else if (f.p.idades[i][j] >= 18) c->adultos += 1;
			else if (f.p.idades[i][j] >= 14) c->adolecentes += 1;
			else if (f.p.idades[i][j] >= 3) c->criancas += 1;
			else printf("Erro na contagem!");
		}
	}
}

// LIMPA A TELA 
void limpatela()
{
	system("cls");
}

// APLICA AS FUNÇÕES DE ACORDO COM OS INPUTS DO IMPRIMEMENU();
void direcionaresposta( CLASSIFICACAO* c, int resp1, char* resp2)
{
	if (resp1 < 1 || resp1 > 6)
	{
		printf("Input inválido!\n");
		imprimemenu();
	}
	else if (resp1 == 1) pegafilmes(&f);
	else if (resp1 == 2) imprimedadosfilme();
	else if (resp1 == 3) imprimesessoes(c);
	else if (resp1 == 4) letexto();
	else if (resp1 == 5) dadosaluno(); 
	else if (resp1 == 6)
	{
		// PERGUNTA SE DESEJA SAIR OU CONTINUAR NO MENU
		printf("Deseja sair (S/N): ");
		scanf(" %c", resp2);
		*resp2 = toupper(*resp2);
	}
}

// LÊ O TEXTO COM O ASSUNTO TEÓRICO
void letexto()
{
	FILE* arq;
	char Linha[500];
	char* result;
	int i;

	// Abre um arquivo TEXTO para LEITURA
	arq = fopen("introducao.txt", "rt");
	if (arq == NULL)  // Se houve erro na abertura
	{
		printf("Problemas na abertura do arquivo\n");
		return;
	}
	i = 1;
	while (!feof(arq))
	{
		// Lê uma linha (inclusive com o '\n')
		result = fgets(Linha, 150, arq);  // o 'fgets' lê até 149 caracteres ou até o '\n'
		if (result)  // Se foi possível ler
			printf("Linha %d : %s", i, Linha);
		i++;
	}
	fclose(arq);
	Espera();
}

void Espera()  // Definição da função "Espera"
{
	int tecla;
	while (tecla != 10) // nl(newline) = 10 na tabela ASCII (\n)
	{
		tecla = getchar();
		printf("Digite ENTER\n");
	}
}

// MENU DE ENTRADA -> (CRIAR MÉTODO PARA AS FUNÇÕES DE INPUT)
void imprimemenu()
{
	int resp1;
	char resp2 = 'N';

	do 
	{
		CLASSIFICACAO c = CLASSIFICACAO_default; // Iniciar meu struct com as variáveis iniciar com 0 como padrão
		// INPUT
		printf("Digite 1 para inserir os dados:\n"
			"Digite 2 para imprimir o nome do filme, a quantidade de pessoas do sexo feminino e a quantidade de pessoas do sexo"
			"masculino que assistiram ao filme:\n"
			"Digite 3 para imprimir quantidade de pessoas maiores de idade(idade maior ou igual a 18 anos) do sexo masculino e a\n"
			"         quantidade de pessoas maiores de idade do sexo feminino que estiveram presentes em cada sessão:\n"
			"Digite 4 para ler o texo com a base teórica:\n"
			"Digite 5 para imprimir os dados do aluno:\n"
			"Digite 6 para sair:\n");

		int status = scanf("%d", &resp1);
		limpatela();
		validavalor(&status, &resp1, 3, 0, 0);

		// JOGA PARA AS FUNÇÕES DE ACORDO COM O INPUT
		direcionaresposta(&c, resp1, &resp2);
		Espera();
		limpatela();

	} while (resp2 == 'N'); 
}

// IMPRIME DADOS DE ACORDO COM A QUESTÃO 1 DO PROJETO
void imprimedadosfilme()
{
	int soma_f = 0;
	int soma_m = 0;
	for (int i = 0; i < f.sessoes; i++)
	{
		contasexo(i, 1);
		soma_f += f.p.s.feminino[i];
		soma_m += f.p.s.masculino[i];
	}
	printf("NOME DO FILME: %s", f.nome);
	printf("PESSOAS DO SEXO FEMININO: %d\n", soma_f);
	printf("PESSOAS DO SEXO MASCULINO: %d\n", soma_m);
	Espera();
}

// IMPRIME DADOS DE ACORDO COM A QUESTÃO 2 DO PROJETO
void imprimesessoes(CLASSIFICACAO* c)
{
	contaidades(c,f.sessoes);
	printf("QUANTIDADE DE PESSOAS POR CLASSIFICAÇÃO DE IDADE:\n\n");
	printf("CRIANÇAS (3 ATÉ 13 ANOS): %d\n", c->criancas);
	printf("ADOLESCENTES (14 ATÉ 17 ANOS): %d\n", c->adolecentes);
	printf("ADULTOS (18 ATÉ 64 ANOS): %d\n", c->adultos);
	printf("IDOSOS (65 ATÉ 100 ANOS): %d\n", c->idosos);
	
	int maiores;
	printf("\nPESSOAS MAIORES QUE 18: \n\n");
	for (int i = 0; i < f.sessoes; i++)
	{
		printf("SESSÃO %d:\n", i + 1);
		contasexo(i, 2);
		printf("PESSOAS MAIORES DE 18 DO SEXO MASCULINO: %d \n", f.p.s.masculino[i]);
		printf("PESSOAS MAIORES DE 18 DO SEXO FEMININO: %d \n", f.p.s.feminino[i]);
	}
	Espera();
}

int main()
{
	setlocale(LC_ALL, "");
	printf("Projeto prático 01:\n");

	imprimemenu();
	liberamemoria(&f);
}
